apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: db
  labels:
    app: words-db
spec:
  template:
    metadata:
      labels:
        app: words-db
    spec:
      containers:
      - name: db
        image: dockersamples/k8s-wordsmith-db
        ports:
        - containerPort: 5432
          name: db
---
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    app: words-db
spec:
  ports:
    - port: 5432
      targetPort: 5432
      name: db
  selector:
    app: words-db
  type: ClusterIP
  clusterIP: None
---
#######################################################
# Use the right apiversion and kind for deploying the second microservice
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: words
  labels:
    app: words-api
spec:
  replicas: 5
  template:
    metadata:
      labels:
        app: words-api
    spec:
      containers:
        # name the pods "words" and use the image dockersamples/k8s-wordsmith-api
        - name: words
          image: dockersamples/k8s-wordsmith-api
          ports:
          - containerPort: 8080
            name: api
---
# Use the right apiversion and type for a service
apiVersion: v1
kind: Service
metadata:
  name: words
  labels:
    app: words-api
spec:
  ports:
    - port: 8080
      targetPort: 8080
      name: api
  selector:
    app: words-api
  type: ClusterIP
  clusterIP: None
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: web
  labels:
    app: words-web
spec:
  template:
    metadata:
      labels:
        app: words-web
    spec:
      containers:
        - image: dockersamples/k8s-wordsmith-web
          name: web
          ports:
            - containerPort: 80
              name: words-web

#######################################################
# Write your own Deployment object with the following attributes
#       name = web
#       label: app = words-web
# The underlying pods should have the following attributes
#       labels: app = words-web
#       name = web
#       image= dockersamples/k8s-wordsmith-web
#       use containerPort = 80
#       name port = words-web


---
# Write your own Service with the following attributes:
#       name = web
#       labels: app= words-web
#       type: LoadBalancer
#       selector: app=words-web
#       ports: Container(Target) Port 80 to port 8081
#       name port web

apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    app: words-web
spec:
  type: LoadBalancer
  selector:
    app: words-web
  ports:
    - port: 8081
      targetPort: 80
      name: web
